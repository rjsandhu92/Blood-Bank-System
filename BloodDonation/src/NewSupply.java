
import java.awt.Component;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class NewSupply extends javax.swing.JFrame 
{

    
    ArrayList<Integer> listOfIds;
    DateTextField newSupplyDateText;
    int aPositive,aNegetive,bPositive,bNegetive,oPositive,oNegetive,abPositive,abNegetive,total,left;
    boolean flag[];
    public NewSupply() {
        initComponents();
        flag = new boolean[8];
        
        for(int i = 0;i<=7;i++)
        {
            flag[i] = true;
        }
        newSupplyDateText = new DateTextField();
        newSupplyDateText.setBounds(660, 35, 180, 30);
        newSupplySupplyInfo.add(newSupplyDateText);
        newSupplyDateText.setEditable(false);
        aPositiveTotal.setEditable(false);
        bPositiveTotal.setEditable(false);
        oPositiveTotal.setEditable(false);
        abPositiveTotal.setEditable(false);
        aNegetiveTotal.setEditable(false);
        bNegetiveTotal.setEditable(false);
        oNegetiveTotal.setEditable(false);
        abNegetiveTotal.setEditable(false);
        
        totalBloodSupplied.setEditable(false);
        bloodLeftInBank.setEditable(false);
        
        listOfIds = new ArrayList<>();
        try
        {
            Connection con = DataBaseConnection.open();
            Statement stmt = (Statement)con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stmt.executeQuery("select * from hospital order by hospital_name");
            while(rs.next())
            {
                listOfIds.add(rs.getInt("hospital_id"));
                newSupplyHospitalCombo.addItem(rs.getString("hospital_name")+" ("+rs.getString("hospital_city")+" , "+rs.getString("hospital_state")+")");
            }
            DataBaseConnection.close(con);
            
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        
        bloodBankRefresh();
    }
    
    void bloodBankRefresh()
    {
        try
        {
            Connection con = DataBaseConnection.open();
            Statement stmt = (Statement)con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stmt.executeQuery("select * from blood_bank");
            rs.next();
            aPositive = rs.getInt("blood_count");
            aPositiveTotal.setText(""+aPositive);
            rs.next();
            aNegetive = rs.getInt("blood_count");
            aNegetiveTotal.setText(""+aNegetive);
            rs.next();
            bPositive = rs.getInt("blood_count");
            bPositiveTotal.setText(""+bPositive);
            rs.next();
            bNegetive = rs.getInt("blood_count");
            bNegetiveTotal.setText(""+bNegetive);
            rs.next();
            oPositive = rs.getInt("blood_count");
            oPositiveTotal.setText(""+oPositive);
            rs.next();
            oNegetive = rs.getInt("blood_count");
            oNegetiveTotal.setText(""+oNegetive);
            rs.next();
            abPositive = rs.getInt("blood_count");
            abPositiveTotal.setText(""+abPositive);
            rs.next();
            abNegetive = rs.getInt("blood_count");
            abNegetiveTotal.setText(""+abNegetive);
            DataBaseConnection.close(con);
            left = aPositive+aNegetive+bPositive+bNegetive+abPositive+abNegetive+oPositive+oNegetive;
            totalBloodSupplied.setText("0");
            bloodLeftInBank.setText(""+left);
            
            aPositiveSupplied.setText("0");
            aNegetiveSupplied.setText("0");
            bPositiveSupplied.setText("0");
            bNegetiveSupplied.setText("0");
            oPositiveSupplied.setText("0");
            oNegetiveSupplied.setText("0");
            abPositiveSupplied.setText("0");
            abNegetiveSupplied.setText("0");
            
            
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workingCampNameText = new javax.swing.JLabel();
        newSupplySupplyInfo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        newSupplyHospitalCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        oPositiveSupplied = new javax.swing.JTextField();
        aPositiveSupplied = new javax.swing.JTextField();
        bNegetiveSupplied = new javax.swing.JTextField();
        bPositiveSupplied = new javax.swing.JTextField();
        aPositiveTotal = new javax.swing.JTextField();
        aNegetiveTotal = new javax.swing.JTextField();
        bPositiveTotal = new javax.swing.JTextField();
        bNegetiveTotal = new javax.swing.JTextField();
        oPositiveTotal = new javax.swing.JTextField();
        aNegetiveSupplied = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        oNegetiveSupplied = new javax.swing.JTextField();
        oNegetiveTotal = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        abPositiveSupplied = new javax.swing.JTextField();
        abPositiveTotal = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        abNegetiveSupplied = new javax.swing.JTextField();
        abNegetiveTotal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        totalBloodSupplied = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        bloodLeftInBank = new javax.swing.JTextField();
        newSupplySupplyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        workingCampNameText.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        workingCampNameText.setForeground(new java.awt.Color(255, 51, 51));
        workingCampNameText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        workingCampNameText.setText("Supply");
        getContentPane().add(workingCampNameText);
        workingCampNameText.setBounds(408, 0, 200, 80);

        newSupplySupplyInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Supply Info", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Candara", 0, 10), new java.awt.Color(255, 0, 0))); // NOI18N
        newSupplySupplyInfo.setLayout(null);

        jLabel1.setText("Hospital");
        newSupplySupplyInfo.add(jLabel1);
        jLabel1.setBounds(30, 35, 60, 30);

        newSupplyHospitalCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        newSupplySupplyInfo.add(newSupplyHospitalCombo);
        newSupplyHospitalCombo.setBounds(100, 35, 450, 30);

        jLabel2.setText("Date");
        newSupplySupplyInfo.add(jLabel2);
        jLabel2.setBounds(570, 35, 80, 30);

        getContentPane().add(newSupplySupplyInfo);
        newSupplySupplyInfo.setBounds(80, 100, 850, 100);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Supply Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Candara", 0, 10), new java.awt.Color(255, 51, 51))); // NOI18N
        jPanel1.setLayout(null);

        jLabel3.setText("O+");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(610, 40, 30, 30);

        jLabel4.setText("A+");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(40, 40, 30, 30);

        jLabel5.setText("A-");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(40, 90, 30, 30);

        jLabel6.setText("B+");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 140, 30, 30);

        jLabel7.setText("B-");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(40, 190, 30, 30);

        oPositiveSupplied.setName("oP");
        oPositiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                oPositiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                oPositiveSuppliedFocusGained(evt);
            }
        });
        oPositiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                oPositiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(oPositiveSupplied);
        oPositiveSupplied.setBounds(660, 40, 60, 30);

        aPositiveSupplied.setName("aP");
        aPositiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                aPositiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                aPositiveSuppliedFocusGained(evt);
            }
        });
        aPositiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                aPositiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(aPositiveSupplied);
        aPositiveSupplied.setBounds(90, 40, 60, 30);

        bNegetiveSupplied.setName("bN");
        bNegetiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bNegetiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                bNegetiveSuppliedFocusGained(evt);
            }
        });
        bNegetiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bNegetiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(bNegetiveSupplied);
        bNegetiveSupplied.setBounds(90, 190, 60, 30);

        bPositiveSupplied.setName("bP");
        bPositiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                bPositiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                bPositiveSuppliedFocusGained(evt);
            }
        });
        bPositiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                bPositiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(bPositiveSupplied);
        bPositiveSupplied.setBounds(90, 140, 60, 30);
        jPanel1.add(aPositiveTotal);
        aPositiveTotal.setBounds(170, 40, 60, 30);
        jPanel1.add(aNegetiveTotal);
        aNegetiveTotal.setBounds(170, 90, 60, 30);
        jPanel1.add(bPositiveTotal);
        bPositiveTotal.setBounds(170, 140, 60, 30);
        jPanel1.add(bNegetiveTotal);
        bNegetiveTotal.setBounds(170, 190, 60, 30);
        jPanel1.add(oPositiveTotal);
        oPositiveTotal.setBounds(740, 40, 60, 30);

        aNegetiveSupplied.setName("aN");
        aNegetiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                aNegetiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                aNegetiveSuppliedFocusGained(evt);
            }
        });
        aNegetiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                aNegetiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(aNegetiveSupplied);
        aNegetiveSupplied.setBounds(90, 90, 60, 30);

        jLabel8.setText("O-");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(610, 90, 30, 30);

        oNegetiveSupplied.setName("oN");
        oNegetiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                oNegetiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                oNegetiveSuppliedFocusGained(evt);
            }
        });
        oNegetiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                oNegetiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(oNegetiveSupplied);
        oNegetiveSupplied.setBounds(660, 90, 60, 30);
        jPanel1.add(oNegetiveTotal);
        oNegetiveTotal.setBounds(740, 90, 60, 30);

        jLabel9.setText("AB+");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(610, 140, 30, 30);

        abPositiveSupplied.setName("abP");
        abPositiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                abPositiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                abPositiveSuppliedFocusGained(evt);
            }
        });
        abPositiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                abPositiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(abPositiveSupplied);
        abPositiveSupplied.setBounds(660, 140, 60, 30);
        jPanel1.add(abPositiveTotal);
        abPositiveTotal.setBounds(740, 140, 60, 30);

        jLabel10.setText("AB-");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(610, 190, 30, 30);

        abNegetiveSupplied.setName("abN");
        abNegetiveSupplied.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                abNegetiveSuppliedFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                abNegetiveSuppliedFocusGained(evt);
            }
        });
        abNegetiveSupplied.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                abNegetiveSuppliedKeyTyped(evt);
            }
        });
        jPanel1.add(abNegetiveSupplied);
        abNegetiveSupplied.setBounds(660, 190, 60, 30);
        jPanel1.add(abNegetiveTotal);
        abNegetiveTotal.setBounds(740, 190, 60, 30);

        jLabel13.setText("Total Blood Supplied");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(370, 30, 120, 30);

        totalBloodSupplied.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(totalBloodSupplied);
        totalBloodSupplied.setBounds(380, 60, 100, 30);

        jLabel14.setText("Blood left in Bank");
        jPanel1.add(jLabel14);
        jLabel14.setBounds(380, 110, 120, 30);

        bloodLeftInBank.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(bloodLeftInBank);
        bloodLeftInBank.setBounds(380, 140, 100, 30);

        newSupplySupplyButton.setText("Supply");
        newSupplySupplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSupplySupplyButtonActionPerformed(evt);
            }
        });
        jPanel1.add(newSupplySupplyButton);
        newSupplySupplyButton.setBounds(360, 200, 150, 40);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(80, 230, 850, 260);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1016)/2, (screenSize.height-639)/2, 1016, 639);
    }// </editor-fold>//GEN-END:initComponents

    private void newSupplySupplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSupplySupplyButtonActionPerformed
        String hospital = newSupplyHospitalCombo.getSelectedItem().toString();
        if(hospital.equals("--Select--"))
        {
            JOptionPane.showMessageDialog(this, "Select Hospital !!");
        }
        else
        {
            

            try
            {
                Thread.sleep(50);
            }
            catch (Exception ex)
            {
                ex.printStackTrace();
            }

            boolean localFlag = true;
            for(int j = 0;j<=7;j++)
            {
                if(flag[j] == false)
                {
                    localFlag = false;
                    break;
                }
            }
            int i = 1;
            if(localFlag)
            {
                i = JOptionPane.showConfirmDialog(this, "Are You Sure ??","Confirm",JOptionPane.YES_NO_OPTION);
            }

            if(i == 0)
            {

                int aPositive = Integer.parseInt(aPositiveSupplied.getText());
                int aNegetive = Integer.parseInt(aNegetiveSupplied.getText());
                int bPositive = Integer.parseInt(bPositiveSupplied.getText());
                int bNegetive = Integer.parseInt(bNegetiveSupplied.getText());
                int oPositive = Integer.parseInt(oPositiveSupplied.getText());
                int oNegetive = Integer.parseInt(oNegetiveSupplied.getText());
                int abPositive = Integer.parseInt(abPositiveSupplied.getText());
                int abNegetive = Integer.parseInt(abNegetiveSupplied.getText());
                int totalAmount = aPositive+aNegetive+bPositive+bNegetive+oPositive+oNegetive+abPositive+abNegetive;
                String bloodGroups = aPositiveSupplied.getText()+","+aNegetiveSupplied.getText()+","+bPositiveSupplied.getText()+","+bNegetiveSupplied.getText()+","+oPositiveSupplied.getText()+","+oNegetiveSupplied.getText()+","+abPositiveSupplied.getText()+","+abNegetiveSupplied.getText();
                String date = newSupplyDateText.getText();
                
                try
                {
                    Connection con = DataBaseConnection.open();
                    Statement stmt = (Statement)con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs = stmt.executeQuery("select * from supply");
                    rs.moveToInsertRow();
                    int hospitalId = listOfIds.get(newSupplyHospitalCombo.getSelectedIndex()-1);
                    rs.updateInt("hospital_id", hospitalId);
                    rs.updateString("supply_date", date);
                    rs.updateString("supply_blood_group", bloodGroups);
                    rs.updateInt("supply_total_amount", totalAmount);
                    rs.insertRow();
                    DataBaseConnection.close(con);
                    
                    Connection con1 = DataBaseConnection.open();
                    Statement stmt1 = (Statement)con1.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs1 = stmt1.executeQuery("select * from blood_bank");
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-aPositive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-aNegetive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-bPositive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-bNegetive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-oPositive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-oNegetive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-abPositive);
                    rs1.updateRow();
                    rs1.next();
                    rs1.updateInt("blood_count", rs1.getInt("blood_count")-abNegetive);
                    rs1.updateRow();
                    
                    JOptionPane.showMessageDialog(this, "Entery Saved !!");
                    bloodBankRefresh();
                }
                catch (Exception ex)
                {
                    ex.printStackTrace();
                }
            }
            
        }
        
    }//GEN-LAST:event_newSupplySupplyButtonActionPerformed

    private void aPositiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aPositiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_aPositiveSuppliedFocusGained

    private void aPositiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aPositiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_aPositiveSuppliedFocusLost

    private void aNegetiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aNegetiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_aNegetiveSuppliedFocusGained

    private void aNegetiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aNegetiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_aNegetiveSuppliedFocusLost

    private void bPositiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bPositiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_bPositiveSuppliedFocusGained

    private void bPositiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bPositiveSuppliedFocusLost
       onFocusLost(evt.getComponent());
       isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_bPositiveSuppliedFocusLost

    private void bNegetiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bNegetiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_bNegetiveSuppliedFocusGained

    private void bNegetiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bNegetiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_bNegetiveSuppliedFocusLost

    private void oPositiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oPositiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_oPositiveSuppliedFocusGained

    private void oPositiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oPositiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_oPositiveSuppliedFocusLost

    private void oNegetiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oNegetiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_oNegetiveSuppliedFocusGained

    private void oNegetiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oNegetiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_oNegetiveSuppliedFocusLost

    private void abPositiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_abPositiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_abPositiveSuppliedFocusGained

    private void abPositiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_abPositiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_abPositiveSuppliedFocusLost

    private void abNegetiveSuppliedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_abNegetiveSuppliedFocusGained
        onFocusGained(evt.getComponent());
    }//GEN-LAST:event_abNegetiveSuppliedFocusGained

    private void abNegetiveSuppliedFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_abNegetiveSuppliedFocusLost
        onFocusLost(evt.getComponent());
        isConditionsOk(evt.getComponent());
    }//GEN-LAST:event_abNegetiveSuppliedFocusLost

    private void aPositiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aPositiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_aPositiveSuppliedKeyTyped

    private void aNegetiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aNegetiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_aNegetiveSuppliedKeyTyped

    private void bPositiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bPositiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_bPositiveSuppliedKeyTyped

    private void bNegetiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bNegetiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_bNegetiveSuppliedKeyTyped

    private void oPositiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_oPositiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_oPositiveSuppliedKeyTyped

    private void oNegetiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_oNegetiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_oNegetiveSuppliedKeyTyped

    private void abPositiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_abPositiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_abPositiveSuppliedKeyTyped

    private void abNegetiveSuppliedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_abNegetiveSuppliedKeyTyped
        char ch = evt.getKeyChar();
        if(!isNumeric(ch))
        {
            evt.consume();
        }
    }//GEN-LAST:event_abNegetiveSuppliedKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Global.mainForm.setEnabled(true);
        Global.mainForm.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    void onFocusGained(Component c)
    {
        JTextField currentTextField = (JTextField)c;
        String s = currentTextField.getText();
        if(s.equals("0"))
        {
            currentTextField.setText("");
        } 
    }
    
    void onFocusLost(Component c)
    {
        JTextField currentTextField = (JTextField)c;
        String s = currentTextField.getText();
        if(s.isEmpty())
        {
            currentTextField.setText("0");
        }
    }
    
    
    void isConditionsOk(Component c)
    {
        JTextField currentTextField = (JTextField)c;

        String name = currentTextField.getName();
        
        if(name.startsWith("aP"))
        {
            String s = aPositiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = aPositiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[0] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                aPositiveSupplied.requestFocus();
            }
            else
            {
                flag[0] = true;
                countTotal();
            }
            
        }
        else if(name.startsWith("aN"))
        {
            String s = aNegetiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = aNegetiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[1] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                aNegetiveSupplied.requestFocus();
            }
            else
            {
                flag[1] = true;
                countTotal();
            }
        }
        else if(name.startsWith("bP"))
        {
            String s = bPositiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = bPositiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[2] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                bPositiveSupplied.requestFocus();
            }
            else
            {
                flag[2] = true;
                countTotal();
            }
        }
        else if(name.startsWith("bN"))
        {
            String s = bNegetiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = bNegetiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[3] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                bNegetiveSupplied.requestFocus();
            }
            else
            {
                flag[3] = true;
                countTotal();
            }
        }
        else if(name.startsWith("oP"))
        {
            String s = oPositiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = oPositiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[4] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                oPositiveSupplied.requestFocus();
            }
            else
            {
                flag[4] = true;
                countTotal();
            }
        }
        else if(name.startsWith("oN"))
        {
            String s = oNegetiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = oNegetiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[5] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                oNegetiveSupplied.requestFocus();
            }
            else
            {
                flag[5] = true;
                countTotal();
            }
        }
        else if(name.startsWith("abP"))
        {
            String s = abPositiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = abPositiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[6] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                abPositiveSupplied.requestFocus();
            }
            else
            {
                flag[6] = true;
                countTotal();
            }
        }
        else if(name.startsWith("abN"))
        {
           String s = abNegetiveSupplied.getText();
            int countSupplied = Integer.parseInt(s);
            String t = abNegetiveTotal.getText();
            int countTotal = Integer.parseInt(t);
            if(countSupplied>countTotal)
            {
                flag[7] = false;
                JOptionPane.showMessageDialog(this, "Invalid Entry");
                abNegetiveSupplied.requestFocus();
            }
            else
            {
                flag[7] = true;
                countTotal();
            }
        }
        
    }
    
    void countTotal()
    {
        String aP = aPositiveSupplied.getText();
        String aN = aNegetiveSupplied.getText();
        String bP = bPositiveSupplied.getText();
        String bN = bNegetiveSupplied.getText();
        String oP = oPositiveSupplied.getText();
        String oN = oNegetiveSupplied.getText();
        String abP = abPositiveSupplied.getText();
        String abN = abNegetiveSupplied.getText();
        
        int aPositive = Integer.parseInt(aP.isEmpty()?"0":aP);
        int aNegetive = Integer.parseInt(aN.isEmpty()?"0":aN);
        int bPositive = Integer.parseInt(bP.isEmpty()?"0":bP);
        int bNegetive = Integer.parseInt(bN.isEmpty()?"0":bN);
        int oPositive = Integer.parseInt(oP.isEmpty()?"0":oP);
        int oNegetive = Integer.parseInt(oN.isEmpty()?"0":oN);
        int abPositive = Integer.parseInt(abP.isEmpty()?"0":abP);
        int abNegetive = Integer.parseInt(abN.isEmpty()?"0":abN);
        int t = aPositive+aNegetive+bPositive+bNegetive+oPositive+oNegetive+abPositive+abNegetive;
        totalBloodSupplied.setText(""+t);
        bloodLeftInBank.setText(""+(left-t));
        
    }
    
    boolean isNumeric(char c)
    {
        try 
        {
            Integer.parseInt(""+c);
            return true;
        }
        catch (Exception e) 
        {
           return false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NewSupply().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aNegetiveSupplied;
    private javax.swing.JTextField aNegetiveTotal;
    private javax.swing.JTextField aPositiveSupplied;
    private javax.swing.JTextField aPositiveTotal;
    private javax.swing.JTextField abNegetiveSupplied;
    private javax.swing.JTextField abNegetiveTotal;
    private javax.swing.JTextField abPositiveSupplied;
    private javax.swing.JTextField abPositiveTotal;
    private javax.swing.JTextField bNegetiveSupplied;
    private javax.swing.JTextField bNegetiveTotal;
    private javax.swing.JTextField bPositiveSupplied;
    private javax.swing.JTextField bPositiveTotal;
    private javax.swing.JTextField bloodLeftInBank;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox newSupplyHospitalCombo;
    private javax.swing.JButton newSupplySupplyButton;
    private javax.swing.JPanel newSupplySupplyInfo;
    private javax.swing.JTextField oNegetiveSupplied;
    private javax.swing.JTextField oNegetiveTotal;
    private javax.swing.JTextField oPositiveSupplied;
    private javax.swing.JTextField oPositiveTotal;
    private javax.swing.JTextField totalBloodSupplied;
    private javax.swing.JLabel workingCampNameText;
    // End of variables declaration//GEN-END:variables
}
